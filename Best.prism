ctmc

// failure rates
const double lambda_lb = 1/(60*60*24*365);	// 1Y: Load Balancer
const double lambda_ms = 1/(60*60*24*30);	// 1M: Main Server
const double lambda_s = 1/(60*60*24*7);		// 1W: Server
const double p_recover = 90/100;		// 90% chance of a successful reboot

// number of servers
const int SERVERS = 3;
const int MSERVERS = 2;

// operativeness conditions
const int MIN_MSERVERS;
const int MIN_SERVERS;

// maximum number of consecutive times components can be rebooted before considering them down permanently
const int MAX_LBreboots;



// Load Balancer
module load_balancer

	lb: [0..2] init 2;			// status: 2=ok, 1=transient fault, 0=failed
	LB_reboots: [0..MAX_LBreboots+1] init 0;	// number of consecutive times the Load Balancer is rebooted


	// failure
	[] (lb=2) -> lambda_lb : (lb'= 1);		// temporary failure of the lb

	// p_recover chances of LB going back up (reboot counter resets), or increase the reboot counter
	[reb] (lb=1) -> p_recover: (lb'= 2)&(LB_reboots'= 0) + (1-p_recover): (LB_reboots'= LB_reboots+1);

	// if the reboot counter exceeds the allowed MAX_LBreboots, shut down the Load Balancer
	[] (lb=1)&(LB_reboots>MAX_LBreboots) -> (lb'= 0);

// UPDATE: destination is implicity done: there is no actual choice between the servers; as only 1 is working at
// 	a time, the choice can be not excplicity written

endmodule




// Main Server
module main_servers
// UPDATE: only 1 main server is running at a time. When a server goes down, the other takes control.
// 	While a main server is down and the other is working, the faulty server is continuously rebooted.
//	chances of successfull reboot halve at every try.

	ms_up: [0..MSERVERS] init MSERVERS;		// number of running servers
	ms_dw: [0..MSERVERS] init 0;			// number of permanently failed servers


	// failure
	[] ms_up>0 -> lambda_ms: (ms_up'= ms_up-1);

	// recovery
	[reb] (ms_up<MSERVERS)&(ms_dw<MSERVERS) -> p_recover: (ms_up'= ms_up+1) + (1-p_recover): (ms_dw'=ms_dw+1);		// the chances that next reboot will be
																// successfull continuously decrease 'till 20/100

endmodule



 
// Servers
module servers

// UPDATE: transient fault servers are implicit in the model now. They can be calculated as (SERVERS-(MS1_up+MS1_dw)). 

	MS1_up:[0..SERVERS] init SERVERS;	// UP servers connected to MS1
	MS2_up:[0..SERVERS] init SERVERS;	// UP servers connected to MS2

	MS1_dw:[0..SERVERS] init 0;		// DOWN servers connected to MS1
	MS2_dw:[0..SERVERS] init 0;		// DOWN servers connected to MS2


	// failures of the servers: the probability of a server failing is related to the status of other servers:
	// if a server is down, it is more likely that other servers will go down too (water leak, humidity, heat...).
	// this is assuming the servers connected to the same Main Server are stored nearby each other or rely on shared resources

// UPDATE: only 1 server is requested at a time. Therefore " MS1_up* " is removed

	// based on the selection, there is a chance of lambda_s for every UP server to go into a transient fault
	[] (ms_up=2)&(MS1_up>0) -> lambda_s: (MS1_up'= MS1_up-1); 								// ERROR
	[] (ms_up=1)&(MS2_up>0) -> lambda_s: (MS2_up'= MS2_up-1);

	// at reboot, each temporary faulty server has a p_recover chance of going back online, otherwise put it is the failed servers
	[reb] (MS1_up<SERVERS)&(MS2_dw<SERVERS) -> p_recover: (MS1_up'= MS1_up+1) + (1-(p_recover)): (MS1_dw'= MS1_dw+1);	// ERROR
	[reb] (MS2_up<SERVERS)&(MS2_dw<SERVERS) -> p_recover: (MS2_up'= MS2_up+1) + (1-(p_recover)): (MS2_dw'= MS2_dw+1);

endmodule






// failure of the load balancer if it is down
label "f_loadBalancer" = lb=0;
// failure of main servers if the minimum main servers are less than the minimum required
label "f_mainServer" = ms_dw>(MSERVERS-MIN_MSERVERS);
// failure of servers if all servers attached to a MS are down when the MS is sent a package
label "f_servers" = ((ms_up=2)&(MS1_dw>(SERVERS-MIN_SERVERS))) | ((ms_up=1)&(MS1_dw>(SERVERS-MIN_SERVERS)));

// total failure
label "down" = 	(lb=0) |
		ms_dw>(MSERVERS-MIN_MSERVERS) |
		((ms_up=2)&(MS1_dw>(SERVERS-MIN_SERVERS))) | ((ms_up=1)&(MS1_dw>(SERVERS-MIN_SERVERS)));





